using Microsoft.AspNetCore.Mvc;
using OnlineStore.BLL;
using OnlineStore.Models;
using System.Collections.Generic;
using System.Data;

namespace OnlineStoreAPI.Controllers
{
    [ApiController]
    [Route("api/products")]
    public class ProductsController : ControllerBase
    {
        [HttpGet(Name = "GetAllProducts")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<IEnumerable<object>> GetAllProducts()
        {
            var productsList = Product.GetAllProductCatalog();

            if (productsList == null || productsList.Rows.Count == 0)
            {
                return NotFound(new { message = "No products found" });
            }

            var result = new List<object>();

            foreach (DataRow row in productsList.Rows)
            {
                var productId = (int)row["ProductID"];
                
                // Get category info
                var category = Category.Find((int)row["CategoryID"]);
                
                // Get product images
                var images = Image.GetImagesByProductId(productId);
                var imagesList = new List<object>();
                
                if (images != null && images.Rows.Count > 0)
                {
                    foreach (DataRow imgRow in images.Rows)
                    {
                        imagesList.Add(new
                        {
                            imageID = (int)imgRow["ImageID"],
                            imageURL = (string)imgRow["ImageURL"],
                            productID = (int)imgRow["ProductID"],
                            imageOrder = (int)imgRow["ImageOrder"]
                        });
                    }
                }

                result.Add(new
                {
                    productID = productId,
                    productName = (string)row["ProductName"],
                    description = (string)row["Description"],
                    price = (decimal)row["Price"],
                    quantityInStock = (int)row["QuantityInStock"],
                    categoryID = (int)row["CategoryID"],
                    category = category != null ? new
                    {
                        categoryID = category.CategoryID,
                        categoryName = category.CategoryName
                    } : null,
                    images = imagesList
                });
            }

            return Ok(result);
        }

        [HttpGet("{id}", Name = "GetProductByIdDetailed")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<object> GetProductById(int id)
        {
            if (id < 1)
            {
                return BadRequest(new { message = $"Invalid ID {id}" });
            }

            Product product = Product.Find(id);

            if (product == null)
            {
                return NotFound(new { message = $"Product with ID {id} not found" });
            }

            // Get category info
            var category = Category.Find(product.CategoryID);
            
            // Get product images
            var images = Image.GetImagesByProductId(id);
            var imagesList = new List<object>();
            
            if (images != null && images.Rows.Count > 0)
            {
                foreach (DataRow imgRow in images.Rows)
                {
                    imagesList.Add(new
                    {
                        imageID = (int)imgRow["ImageID"],
                        imageURL = (string)imgRow["ImageURL"],
                        productID = (int)imgRow["ProductID"],
                        imageOrder = (int)imgRow["ImageOrder"]
                    });
                }
            }

            var result = new
            {
                productID = product.ProductID,
                productName = product.ProductName,
                description = product.Description,
                price = product.Price,
                quantityInStock = product.QuantityInStock,
                categoryID = product.CategoryID,
                category = category != null ? new
                {
                    categoryID = category.CategoryID,
                    categoryName = category.CategoryName
                } : null,
                images = imagesList
            };

            return Ok(result);
        }

        [HttpGet("category/{categoryId}", Name = "GetProductsByCategory")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<IEnumerable<object>> GetProductsByCategory(int categoryId)
        {
            var productsList = Product.GetProductsByCategoryId(categoryId);

            if (productsList == null || productsList.Rows.Count == 0)
            {
                return Ok(new List<object>()); // Return empty list instead of 404
            }

            var result = new List<object>();

            foreach (DataRow row in productsList.Rows)
            {
                var productId = (int)row["ProductID"];
                
                // Get category info
                var category = Category.Find((int)row["CategoryID"]);
                
                // Get product images
                var images = Image.GetImagesByProductId(productId);
                var imagesList = new List<object>();
                
                if (images != null && images.Rows.Count > 0)
                {
                    foreach (DataRow imgRow in images.Rows)
                    {
                        imagesList.Add(new
                        {
                            imageID = (int)imgRow["ImageID"],
                            imageURL = (string)imgRow["ImageURL"],
                            productID = (int)imgRow["ProductID"],
                            imageOrder = (int)imgRow["ImageOrder"]
                        });
                    }
                }

                result.Add(new
                {
                    productID = productId,
                    productName = (string)row["ProductName"],
                    description = (string)row["Description"],
                    price = (decimal)row["Price"],
                    quantityInStock = (int)row["QuantityInStock"],
                    categoryID = (int)row["CategoryID"],
                    category = category != null ? new
                    {
                        categoryID = category.CategoryID,
                        categoryName = category.CategoryName
                    } : null,
                    images = imagesList
                });
            }

            return Ok(result);
        }

        [HttpGet("search", Name = "SearchProducts")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public ActionResult<IEnumerable<object>> SearchProducts([FromQuery] string q)
        {
            if (string.IsNullOrWhiteSpace(q))
            {
                return GetAllProducts();
            }

            var productsList = Product.SearchProducts(q);

            if (productsList == null || productsList.Rows.Count == 0)
            {
                return Ok(new List<object>()); // Return empty list instead of 404
            }

            var result = new List<object>();

            foreach (DataRow row in productsList.Rows)
            {
                var productId = (int)row["ProductID"];
                
                // Get category info
                var category = Category.Find((int)row["CategoryID"]);
                
                // Get product images
                var images = Image.GetImagesByProductId(productId);
                var imagesList = new List<object>();
                
                if (images != null && images.Rows.Count > 0)
                {
                    foreach (DataRow imgRow in images.Rows)
                    {
                        imagesList.Add(new
                        {
                            imageID = (int)imgRow["ImageID"],
                            imageURL = (string)imgRow["ImageURL"],
                            productID = (int)imgRow["ProductID"],
                            imageOrder = (int)imgRow["ImageOrder"]
                        });
                    }
                }

                result.Add(new
                {
                    productID = productId,
                    productName = (string)row["ProductName"],
                    description = (string)row["Description"],
                    price = (decimal)row["Price"],
                    quantityInStock = (int)row["QuantityInStock"],
                    categoryID = (int)row["CategoryID"],
                    category = category != null ? new
                    {
                        categoryID = category.CategoryID,
                        categoryName = category.CategoryName
                    } : null,
                    images = imagesList
                });
            }

            return Ok(result);
        }
    }
}
