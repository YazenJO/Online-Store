# Online Store API - Implementation Summary & JWT Tutorial

## ✅ **COMPLETED ENDPOINTS**

### Authentication Endpoints (JWT Implemented) 🔐
- **POST /api/auth/login** - Login with username and password
- **POST /api/auth/register** - Register a new customer account
- **GET /api/auth/me** - Get current authenticated user (requires JWT token)

### Products Endpoints 📦
- **GET /api/products** - Get all products with images and category info
- **GET /api/products/{id}** - Get single product with full details
- **GET /api/products/category/{categoryId}** - Get products by category
- **GET /api/products/search?q=query** - Search products by name or description

### Categories Endpoints 📁
- **GET /api/categories** - Get all categories
- **GET /api/categories/{id}** - Get category by ID
- **POST /api/categories** - Create new category
- **PUT /api/categories/{id}** - Update category
- **DELETE /api/categories/{id}** - Delete category
- **GET /api/categories/exists/{id}** - Check if category exists

### Reviews Endpoints ⭐
- **GET /api/products/{productId}/reviews** - Get all reviews for a product (with customer info)
- **GET /api/reviews/{id}** - Get single review by ID
- **POST /api/reviews** - Create a new review (requires JWT authentication)
- **PUT /api/reviews/{id}** - Update a review (requires JWT authentication + ownership)
- **DELETE /api/reviews/{id}** - Delete a review (requires JWT authentication + ownership)

### Customers Endpoints 👤
- **PUT /api/customers/{id}** - Update customer profile (authentication recommended but not enforced yet)

---

## ⚠️ **MISSING/INCOMPLETE ENDPOINTS**

### Order Endpoints (PARTIALLY MISSING)
- ❌ **POST /api/orders** - Basic endpoint exists but needs complex structure for items, shipping, payment
- ❌ **GET /api/customers/{customerId}/orders** - Get all orders for a customer
- ❌ **GET /api/orders/{id}** - Get order with full details (items, shipping, payment)
- ❌ **PUT /api/orders/{id}/cancel** - Cancel an order
- ❌ **GET /api/orders/{id}/tracking** - Get tracking information

---

## 🔐 **JWT AUTHENTICATION - HOW IT WORKS**

### What is JWT?
JWT (JSON Web Token) is a secure way to transmit information between parties as a JSON object. It's commonly used for authentication in APIs.

### JWT Structure
A JWT has three parts separated by dots (.):
```
header.payload.signature
```

Example:
```
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
```

### How JWT Works in Your API

#### 1. **User Login Flow**
```
1. User sends username & password to POST /api/auth/login
2. Server validates credentials
3. Server generates JWT token using JwtService
4. Server returns token + user data
5. Client stores token (localStorage/cookie)
```

#### 2. **Making Authenticated Requests**
```
1. Client includes token in Authorization header
2. Format: Authorization: Bearer <token>
3. Server validates token automatically
4. If valid, request proceeds; if not, returns 401 Unauthorized
```

### JWT Configuration in Your Project

**appsettings.json:**
```json
{
  "Jwt": {
    "Key": "YourSuperSecretKeyThatIsAtLeast32CharactersLong!!!",
    "Issuer": "OnlineStoreAPI",
    "Audience": "OnlineStoreClient"
  }
}
```

- **Key**: Secret key used to sign tokens (MUST be kept secret!)
- **Issuer**: Who created the token (your API)
- **Audience**: Who can use the token (your frontend)

### JWT Service (Services/JwtService.cs)
```csharp
public string GenerateToken(int customerId, string username)
{
    // Claims = data stored in the token
    var claims = new[]
    {
        new Claim(ClaimTypes.NameIdentifier, customerId.ToString()),
        new Claim(ClaimTypes.Name, username),
        new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
    };

    // Token expires in 7 days
    expires: DateTime.UtcNow.AddDays(7)
}
```

### Using JWT in Controllers

**Mark endpoint as requiring authentication:**
```csharp
[Authorize]
[HttpGet("me")]
public ActionResult<CustomerDTO> GetCurrentUser()
{
    // Get user ID from JWT claims
    var customerIdClaim = User.FindFirst(ClaimTypes.NameIdentifier);
    int customerId = int.Parse(customerIdClaim.Value);
    
    // Use customerId to fetch user data
}
```

### Ownership Verification Example (Reviews)
```csharp
[Authorize]
[HttpPut("reviews/{id}")]
public ActionResult<object> UpdateReview(int id, [FromBody] ReviewDTO updatedReviewDTO)
{
    Review review = Review.Find(id);
    
    // Verify the authenticated user owns this review
    var customerIdClaim = User.FindFirst(ClaimTypes.NameIdentifier);
    if (customerIdClaim != null && int.TryParse(customerIdClaim.Value, out int authenticatedCustomerId))
    {
        if (authenticatedCustomerId != review.CustomerID)
        {
            return StatusCode(StatusCodes.Status403Forbidden, 
                new { message = "You can only update your own reviews" });
        }
    }
    
    // Update the review...
}
```

### Testing JWT in Postman/Frontend

**1. Login to get token:**
```
POST http://localhost:5000/api/auth/login
Content-Type: application/json

{
  "username": "john_doe",
  "password": "password123"
}

Response:
{
  "customer": { ... },
  "token": "eyJhbGciOiJIUzI1NiIs..."
}
```

**2. Use token in protected endpoints:**
```
POST http://localhost:5000/api/reviews
Authorization: Bearer eyJhbGciOiJIUzI1NiIs...
Content-Type: application/json

{
  "productID": 1,
  "customerID": 1,
  "reviewText": "Great product!",
  "rating": 5.0
}
```

---

## 🗄️ **REQUIRED DATABASE STORED PROCEDURES**

You need to create these stored procedures in your database:

### Customer Authentication
```sql
-- Get customer by username (for login)
CREATE PROCEDURE SP_GetCustomerByUsername
    @Username NVARCHAR(100)
AS
BEGIN
    SELECT * FROM Customers WHERE Username = @Username
END
```

### Product Queries
```sql
-- Get products by category
CREATE PROCEDURE SP_GetProductsByCategoryID
    @CategoryID INT
AS
BEGIN
    SELECT * FROM ProductCatalog WHERE CategoryID = @CategoryID
END

-- Search products
CREATE PROCEDURE SP_SearchProducts
    @SearchTerm NVARCHAR(200)
AS
BEGIN
    SELECT * FROM ProductCatalog 
    WHERE ProductName LIKE '%' + @SearchTerm + '%' 
       OR Description LIKE '%' + @SearchTerm + '%'
END
```

### Image Queries
```sql
-- Get images by product ID
CREATE PROCEDURE SP_GetImagesByProductID
    @ProductID INT
AS
BEGIN
    SELECT * FROM ProductImages 
    WHERE ProductID = @ProductID 
    ORDER BY ImageOrder
END
```

**⚠️ IMPORTANT: ImageOrder Column Type**
Make sure your `ProductImages` table has `ImageOrder` defined as `SMALLINT` (or `INT`). The current implementation expects `SMALLINT` which maps to C# `short` type.

### Review Queries
```sql
-- Get reviews by product ID
CREATE PROCEDURE SP_GetReviewsByProductID
    @ProductID INT
AS
BEGIN
    SELECT * FROM Reviews WHERE ProductID = @ProductID
END
```

---

## 🚀 **QUICK START GUIDE**

### 1. Update appsettings.json
```json
{
  "ConnectionStrings": {
    "DefaultConnection": "YOUR_CONNECTION_STRING"
  },
  "Jwt": {
    "Key": "YourSuperSecretKeyThatIsAtLeast32CharactersLong!!!",
    "Issuer": "OnlineStoreAPI",
    "Audience": "OnlineStoreClient"
  }
}
```

### 2. Create Database Stored Procedures
Run the SQL scripts above in your database.

### 3. Run the API
```bash
dotnet run
```

### 4. Test Authentication
```bash
# Register new user
POST http://localhost:5000/api/auth/register
{
  "name": "John Doe",
  "email": "john@example.com",
  "username": "johndoe",
  "password": "password123",
  "phone": "+1234567890",
  "address": "123 Main St"
}

# Login
POST http://localhost:5000/api/auth/login
{
  "username": "johndoe",
  "password": "password123"
}

# Use token from login response
GET http://localhost:5000/api/auth/me
Authorization: Bearer <token_from_login>
```

---

## 📋 **RECENT FIXES & IMPROVEMENTS**

### ✅ Fixed InvalidCastException in ProductsController
**Issue:** `Unable to cast object of type 'System.Int16' to type 'System.Int32'`  
**Root Cause:** Database `ImageOrder` column is `SMALLINT` (Int16), but code was casting to `int` (Int32)  
**Fix:** Changed all `imageOrder` casts from `(int)` to `(short)` in ProductsController

### ✅ Eliminated Controller Duplication
**Before:**
- Had both `CategoriesController` and `ProductCategoryController` (duplicate!)
- Had both `ReviewsController` and `ReviewsControllerV2` (duplicate!)

**After:**
- **Deleted:** Old `CategoriesController.cs`
- **Kept & Renamed:** `ProductCategoryController.cs` → Now serves as `CategoriesController` at `/api/categories`
- **Deleted:** Old `ReviewsController.cs` (no auth, non-RESTful)
- **Enhanced:** `ReviewsControllerV2.cs` → Now serves as main `ReviewsController` with full CRUD + JWT

### ✅ Improved API Design
**Categories:**
- ✅ RESTful routes: `/api/categories` instead of `/api/ProductCategory`
- ✅ Full CRUD operations available
- ✅ Consistent error message format

**Reviews:**
- ✅ JWT authentication on POST/PUT/DELETE
- ✅ Ownership verification (users can only modify their own reviews)
- ✅ RESTful routes matching frontend expectations
- ✅ Returns customer info with reviews
- ✅ Returns empty arrays instead of 404 for better frontend handling

---

## ❌ **TODO: Complete Missing Endpoints**

To fully match the frontend documentation, you need to implement:

### 1. Order Management
- Create DTOs for complex order structure (OrderItems, Shipping, Payment)
- Implement GET /api/customers/{customerId}/orders
- Implement GET /api/orders/{id} with full details
- Implement PUT /api/orders/{id}/cancel
- Implement GET /api/orders/{id}/tracking

### 2. Add Authentication to More Endpoints
Add `[Authorize]` attribute to endpoints that should require authentication:
- ✅ Review creation (DONE)
- ✅ Review update/delete (DONE)
- ❌ Customer update endpoint
- ❌ Order creation/viewing

### 3. Add Database Stored Procedures
Create all missing stored procedures listed above.

---

## 🔐 **LEARNING JWT - KEY CONCEPTS**

### 1. **Stateless Authentication**
- Server doesn't store session data
- Token contains all needed information
- Scales better than session-based auth

### 2. **Token Expiration**
- Tokens have expiration time (7 days in your config)
- Frontend should handle token refresh
- Expired tokens return 401 Unauthorized

### 3. **Claims**
- Claims = data stored in token
- Common claims:
  - `NameIdentifier` = User ID
  - `Name` = Username
  - `Email` = User email
  - Custom claims for roles, permissions, etc.

### 4. **Ownership Verification**
- Always verify users can only modify their own resources
- Example: User can only edit/delete their own reviews
- Use `User.FindFirst(ClaimTypes.NameIdentifier)` to get authenticated user ID
- Return 403 Forbidden if ownership check fails

### 5. **Security Best Practices**
- ✅ Keep secret key secure (environment variables in production)
- ✅ Use HTTPS in production
- ✅ Implement token refresh mechanism
- ✅ Validate token on every request
- ✅ Set reasonable expiration times
- ✅ Never store sensitive data in tokens (they're not encrypted!)
- ✅ Always verify ownership before allowing modifications

---

## 🌐 **CORS Configuration**

Your API is configured to allow all origins (for development):
```csharp
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAll", builder =>
    {
        builder.AllowAnyOrigin()
               .AllowAnyMethod()
               .AllowAnyHeader();
    });
});
```

**For production**, restrict to specific origins:
```csharp
builder.AllowOrigins("https://yourdomain.com")
```

---

## 📦 **NuGet Packages Installed**

- ✅ Microsoft.AspNetCore.Authentication.JwtBearer (9.0.10)
- ✅ System.IdentityModel.Tokens.Jwt (8.14.0)
- ✅ Microsoft.AspNetCore.OpenApi (9.0.10)

---

## 📊 **API ENDPOINTS SUMMARY**

| Endpoint | Method | Auth Required | Description |
|----------|--------|---------------|-------------|
| `/api/auth/login` | POST | ❌ | Login with credentials |
| `/api/auth/register` | POST | ❌ | Register new account |
| `/api/auth/me` | GET | ✅ | Get current user |
| `/api/products` | GET | ❌ | Get all products |
| `/api/products/{id}` | GET | ❌ | Get product by ID |
| `/api/products/category/{categoryId}` | GET | ❌ | Get products by category |
| `/api/products/search?q=` | GET | ❌ | Search products |
| `/api/categories` | GET | ❌ | Get all categories |
| `/api/categories/{id}` | GET | ❌ | Get category by ID |
| `/api/categories` | POST | ❌ | Create category |
| `/api/categories/{id}` | PUT | ❌ | Update category |
| `/api/categories/{id}` | DELETE | ❌ | Delete category |
| `/api/products/{productId}/reviews` | GET | ❌ | Get product reviews |
| `/api/reviews/{id}` | GET | ❌ | Get review by ID |
| `/api/reviews` | POST | ✅ | Create review |
| `/api/reviews/{id}` | PUT | ✅ + Ownership | Update own review |
| `/api/reviews/{id}` | DELETE | ✅ + Ownership | Delete own review |
| `/api/customers/{id}` | PUT | ❌ (Should add) | Update customer |

---

## ✅ **SUMMARY**

### What You Have:
- ✅ Complete JWT authentication system
- ✅ Login/Register/Get Current User endpoints
- ✅ Product endpoints with images and categories
- ✅ **Full CRUD for Categories** (no duplication!)
- ✅ **Full CRUD for Reviews with JWT auth** (no duplication!)
- ✅ Ownership verification on reviews
- ✅ RESTful API design
- ✅ CORS enabled for frontend integration
- ✅ **Fixed InvalidCastException** (ImageOrder type mismatch)
- ✅ **Eliminated all controller duplicates**

### What You Need:
- ❌ Complex order endpoints
- ❌ Database stored procedures
- ❌ Add [Authorize] to customer update endpoint
- ❌ Order tracking functionality

### Next Steps:
1. Create all database stored procedures
2. Test authentication flow thoroughly
3. Test review ownership verification
4. Implement remaining order endpoints
5. Add proper error handling
6. Test with frontend application

---

**Good luck with your online store project! 🚀**
