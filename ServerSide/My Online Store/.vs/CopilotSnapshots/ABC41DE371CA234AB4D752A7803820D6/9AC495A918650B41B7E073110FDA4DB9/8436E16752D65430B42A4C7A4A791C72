using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using OnlineStore.BLL;
using OnlineStore.Models;
using System.Collections.Generic;
using System.Security.Claims;

namespace OnlineStoreAPI.Controllers
{
    [ApiController]
    [Route("api")]
    public class ReviewsController : ControllerBase
    {
        // GET /api/products/{productId}/reviews - Get all reviews for a product (Frontend requirement)
        [HttpGet("products/{productId}/reviews", Name = "GetProductReviews")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public ActionResult<IEnumerable<object>> GetProductReviews(int productId)
        {
            var reviewsList = Review.GetReviewsByProductId(productId);

            if (reviewsList == null || reviewsList.Rows.Count == 0)
            {
                return Ok(new List<object>()); // Return empty list, not 404
            }

            var result = new List<object>();

            foreach (System.Data.DataRow row in reviewsList.Rows)
            {
                var customerId = (int)row["CustomerID"];
                var customer = Customer.Find(customerId);

                result.Add(new
                {
                    reviewID = (int)row["ReviewID"],
                    productID = (int)row["ProductID"],
                    customerID = customerId,
                    reviewText = row["ReviewText"]?.ToString(),
                    rating = row["Rating"] != DBNull.Value ? (decimal?)row["Rating"] : null,
                    reviewDate = row["ReviewDate"] != DBNull.Value ? (DateTime?)row["ReviewDate"] : null,
                    customer = customer != null ? new
                    {
                        customerID = customer.CustomerID,
                        name = customer.Name
                    } : null
                });
            }

            return Ok(result);
        }

        // GET /api/reviews/{id} - Get single review by ID
        [HttpGet("reviews/{id}", Name = "GetReviewById")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<object> GetReviewById(int id)
        {
            if (id < 1)
            {
                return BadRequest(new { message = $"Invalid ID {id}" });
            }

            Review review = Review.Find(id);

            if (review == null)
            {
                return NotFound(new { message = $"Review with ID {id} not found" });
            }

            var customer = Customer.Find(review.CustomerID);

            var result = new
            {
                reviewID = review.ReviewID,
                productID = review.ProductID,
                customerID = review.CustomerID,
                reviewText = review.ReviewText,
                rating = review.Rating,
                reviewDate = review.ReviewDate,
                customer = customer != null ? new
                {
                    customerID = customer.CustomerID,
                    name = customer.Name
                } : null
            };

            return Ok(result);
        }

        // POST /api/reviews - Create a new review (Requires authentication)
        [Authorize]
        [HttpPost("reviews", Name = "AddReview")]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        public ActionResult<object> AddReview([FromBody] ReviewDTO newReviewDTO)
        {
            if (newReviewDTO == null || newReviewDTO.ProductID < 1 || newReviewDTO.CustomerID < 1)
            {
                return BadRequest(new { message = "Invalid review data" });
            }

            // Verify the authenticated user matches the customerID in the review
            var customerIdClaim = User.FindFirst(ClaimTypes.NameIdentifier);
            if (customerIdClaim != null && int.TryParse(customerIdClaim.Value, out int authenticatedCustomerId))
            {
                if (authenticatedCustomerId != newReviewDTO.CustomerID)
                {
                    return StatusCode(StatusCodes.Status403Forbidden, 
                        new { message = "You can only create reviews for yourself" });
                }
            }

            Review review = new Review(new ReviewDTO
            (
                null,
                newReviewDTO.ProductID,
                newReviewDTO.CustomerID,
                newReviewDTO.ReviewText,
                newReviewDTO.Rating,
                DateTime.UtcNow
            ));

            if (!review.Save())
            {
                return StatusCode(StatusCodes.Status500InternalServerError, 
                    new { message = "Error adding review" });
            }

            var customer = Customer.Find(review.CustomerID);

            var result = new
            {
                reviewID = review.ReviewID,
                productID = review.ProductID,
                customerID = review.CustomerID,
                reviewText = review.ReviewText,
                rating = review.Rating,
                reviewDate = review.ReviewDate,
                customer = customer != null ? new
                {
                    customerID = customer.CustomerID,
                    name = customer.Name
                } : null
            };

            return CreatedAtRoute("GetProductReviews", new { productId = review.ProductID }, result);
        }

        // PUT /api/reviews/{id} - Update a review (Requires authentication and ownership)
        [Authorize]
        [HttpPut("reviews/{id}", Name = "UpdateReview")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<object> UpdateReview(int id, [FromBody] ReviewDTO updatedReviewDTO)
        {
            if (id < 1 || updatedReviewDTO == null)
            {
                return BadRequest(new { message = "Invalid review data" });
            }

            Review review = Review.Find(id);

            if (review == null)
            {
                return NotFound(new { message = $"Review with ID {id} not found" });
            }

            // Verify the authenticated user owns this review
            var customerIdClaim = User.FindFirst(ClaimTypes.NameIdentifier);
            if (customerIdClaim != null && int.TryParse(customerIdClaim.Value, out int authenticatedCustomerId))
            {
                if (authenticatedCustomerId != review.CustomerID)
                {
                    return StatusCode(StatusCodes.Status403Forbidden, 
                        new { message = "You can only update your own reviews" });
                }
            }

            // Update only allowed fields
            review.ReviewText = updatedReviewDTO.ReviewText;
            review.Rating = updatedReviewDTO.Rating;
            // Note: ProductID and CustomerID should not be changed after creation

            if (!review.Save())
            {
                return StatusCode(StatusCodes.Status500InternalServerError, 
                    new { message = "Error updating review" });
            }

            var customer = Customer.Find(review.CustomerID);

            var result = new
            {
                reviewID = review.ReviewID,
                productID = review.ProductID,
                customerID = review.CustomerID,
                reviewText = review.ReviewText,
                rating = review.Rating,
                reviewDate = review.ReviewDate,
                customer = customer != null ? new
                {
                    customerID = customer.CustomerID,
                    name = customer.Name
                } : null
            };

            return Ok(result);
        }

        // DELETE /api/reviews/{id} - Delete a review (Requires authentication and ownership)
        [Authorize]
        [HttpDelete("reviews/{id}", Name = "DeleteReview")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult DeleteReview(int id)
        {
            if (id < 1)
            {
                return BadRequest(new { message = $"Invalid ID {id}" });
            }

            Review review = Review.Find(id);

            if (review == null)
            {
                return NotFound(new { message = $"Review with ID {id} not found" });
            }

            // Verify the authenticated user owns this review
            var customerIdClaim = User.FindFirst(ClaimTypes.NameIdentifier);
            if (customerIdClaim != null && int.TryParse(customerIdClaim.Value, out int authenticatedCustomerId))
            {
                if (authenticatedCustomerId != review.CustomerID)
                {
                    return StatusCode(StatusCodes.Status403Forbidden, 
                        new { message = "You can only delete your own reviews" });
                }
            }

            if (Review.DeleteReview(id))
            {
                return Ok(new { message = $"Review with ID {id} has been deleted" });
            }
            else
            {
                return StatusCode(StatusCodes.Status500InternalServerError, 
                    new { message = "Error deleting review" });
            }
        }
    }
}
