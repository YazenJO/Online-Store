using Microsoft.AspNetCore.Mvc;
using OnlineStore.BLL;
using OnlineStore.DAL;
using OnlineStore.Models;
using System.Collections.Generic;

namespace OnlineStoreAPI.Controllers
{
    [ApiController]
    [Route("api/Reviews")]
    public class ReviewsController : ControllerBase
    {

        [HttpGet("All", Name = "GetAllReviews")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<IEnumerable<ReviewDTO>> GetAllReviews()
        {
            var reviewsList = Review.GetAllReviews();

            if (reviewsList == null || reviewsList.Rows.Count == 0)
            {
                return NotFound("No Reviews Found!");
            }

            var dtoList = new List<ReviewDTO>();

            foreach (System.Data.DataRow row in reviewsList.Rows)
            {
                dtoList.Add(new ReviewDTO
                (
                    (int?)row["ReviewID"],
                    (int)row["ProductID"],
                    (int)row["CustomerID"],
                    (string)row["ReviewText"],
                    (decimal?)row["Rating"],
                    (DateTime?)row["ReviewDate"]
                ));
            }

            return Ok(dtoList);
        }

        [HttpGet("{id}", Name = "GetReviewById")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<ReviewDTO> GetReviewById(int id)
        {
            if (id < 1)
            {
                return BadRequest($"Not accepted ID {id}");
            }

            Review review = Review.Find(id);

            if (review == null)
            {
                return NotFound($"Review with ID {id} not found.");
            }

            ReviewDTO dto = review.ReviewDTO;

            return Ok(dto);
        }

        [HttpPost(Name = "AddReview")]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public ActionResult<ReviewDTO> AddReview(ReviewDTO newReviewDTO)
        {
            if (newReviewDTO == null || newReviewDTO.ProductID < 0 || newReviewDTO.CustomerID < 0)
            {
                return BadRequest("Invalid Review data.");
            }

            Review review = new Review(new ReviewDTO
            (
                    newReviewDTO.ReviewID,
                    newReviewDTO.ProductID,
                    newReviewDTO.CustomerID,
                    newReviewDTO.ReviewText,
                    newReviewDTO.Rating,
                    newReviewDTO.ReviewDate
            ));

            if (!review.Save())
            {
                return StatusCode(StatusCodes.Status500InternalServerError, "Error adding Review");
            }

            newReviewDTO.ReviewID = review.ReviewID;

            return CreatedAtRoute("GetReviewById", new { id = newReviewDTO.ReviewID }, newReviewDTO);
        }

        [HttpPut("{id}", Name = "UpdateReview")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<ReviewDTO> UpdateReview(int id, ReviewDTO updatedReview)
        {
            if (id < 1 || updatedReview == null || updatedReview.ProductID < 0 || updatedReview.CustomerID < 0)
            {
                return BadRequest("Invalid Review data.");
            }

            Review review = Review.Find(id);

            if (review == null)
            {
                return NotFound($"Review with ID {id} not found.");
            }

            review.ProductID = updatedReview.ProductID;
            review.CustomerID = updatedReview.CustomerID;
            review.ReviewText = updatedReview.ReviewText;
            review.Rating = updatedReview.Rating;
            review.ReviewDate = updatedReview.ReviewDate;

            if (!review.Save())
            {
                return StatusCode(StatusCodes.Status500InternalServerError, "Error updating Review");
            }

            return Ok(review.ReviewDTO);
        }

        [HttpDelete("{id}", Name = "DeleteReview")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult DeleteReview(int id)
        {
            if (id < 1)
            {
                return BadRequest($"Not accepted ID {id}");
            }

            if (Review.DeleteReview(id))
            {
                return Ok($"Review with ID {id} has been deleted.");
            }
            else
            {
                return NotFound($"Review with ID {id} not found. No rows deleted!");
            }
        }

        [HttpGet("Exists/{id}", Name = "DoesReviewExist")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public ActionResult<bool> DoesReviewExist(int id)
        {
            if (id < 1)
            {
                return BadRequest($"Not accepted ID {id}");
            }

            bool exists = Review.DoesReviewExist(id);

            return Ok(exists);
        }
    }
}
