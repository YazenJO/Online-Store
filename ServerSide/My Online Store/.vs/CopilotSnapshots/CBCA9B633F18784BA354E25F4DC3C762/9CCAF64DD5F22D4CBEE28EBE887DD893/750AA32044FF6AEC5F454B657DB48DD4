using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using OnlineStore.BLL;
using OnlineStore.DAL;
using OnlineStore.Models;
using System.Collections.Generic;

namespace OnlineStoreAPI.Controllers
{

    [ApiController]
    [Route("api/Orders")]
    public class OrdersController : ControllerBase
    {

        [Authorize(Roles = "Admin")] // Only Admin can see all orders
        [HttpGet("All", Name = "GetAllOrders")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<IEnumerable<OrderDTO>> GetAllOrders()
        {
            var ordersList = Order.GetAllOrders();

            if (ordersList == null || ordersList.Rows.Count == 0)
            {
                return NotFound("No Orders Found!");
            }

            var dtoList = new List<OrderDTO>();

            foreach (System.Data.DataRow row in ordersList.Rows)
            {
                dtoList.Add(new OrderDTO
                (
                    (int?)row["OrderID"],
                    (int)row["CustomerID"],
                    (DateTime?)row["OrderDate"],
                    (decimal)row["TotalAmount"],
                    (short?)row["Status"]
                ));
            }

            return Ok(dtoList);
        }

        [Authorize] // Both Customer and Admin can view specific order
        [HttpGet("{id}", Name = "GetOrderById")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<OrderDTO> GetOrderById(int id)
        {
            if (id < 1)
            {
                return BadRequest($"Not accepted ID {id}");
            }

            Order order = Order.Find(id);

            if (order == null)
            {
                return NotFound($"Order with ID {id} not found.");
            }

            // Check if user is Admin or the order belongs to them
            var userRole = User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value;
            var userId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (userRole != "Admin" && order.CustomerID.ToString() != userId)
            {
                return Forbid(); // User can only view their own orders
            }

            OrderDTO dto = order.OrderDTO;

            return Ok(dto);
        }

        [Authorize] // Any authenticated user - customers get their own, admins can specify
        [HttpGet("customer/{customerId}", Name = "GetOrdersByCustomerID")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<IEnumerable<OrderDTO>> GetOrdersByCustomerID(int customerId)
        {
            if (customerId < 1)
            {
                return BadRequest(new { message = $"Invalid customer ID {customerId}" });
            }

            // Check authorization - users can only view their own orders unless they're admin
            var userRole = User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value;
            var userId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (userRole != "Admin" && customerId.ToString() != userId)
            {
                return Forbid(); // Customers can only view their own orders
            }

            var ordersList = Order.GetOrdersByCustomerID(customerId);

            if (ordersList == null || ordersList.Rows.Count == 0)
            {
                return Ok(new List<OrderDTO>()); // Return empty list instead of 404
            }

            var dtoList = new List<OrderDTO>();

            foreach (System.Data.DataRow row in ordersList.Rows)
            {
                dtoList.Add(new OrderDTO
                (
                    (int?)row["OrderID"],
                    (int)row["CustomerID"],
                    (DateTime?)row["OrderDate"],
                    (decimal)row["TotalAmount"],
                    (short?)row["Status"]
                ));
            }

            return Ok(dtoList);
        }

        [Authorize] // Any authenticated user can create an order
        [HttpPost(Name = "AddOrder")]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public ActionResult<OrderDTO> AddOrder(OrderDTO newOrderDTO)
        {
            var userId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            var userRole = User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value;

            // Non-admin users can only create orders for themselves
            if (userRole != "Admin" && newOrderDTO.CustomerID.ToString() != userId)
            {
                return Forbid();
            }

            if (newOrderDTO == null || newOrderDTO.CustomerID < 0 || newOrderDTO.TotalAmount < 0)
            {
                return BadRequest("Invalid Order data.");
            }

            Order order = new Order(new OrderDTO
            (
                    newOrderDTO.OrderID,
                    newOrderDTO.CustomerID,
                    newOrderDTO.OrderDate,
                    newOrderDTO.TotalAmount,
                    newOrderDTO.Status
            ));

            if (!order.Save())
            {
                return StatusCode(StatusCodes.Status500InternalServerError, "Error adding Order");
            }

            newOrderDTO.OrderID = order.OrderID;

            return CreatedAtRoute("GetOrderById", new { id = newOrderDTO.OrderID }, newOrderDTO);
        }

        [Authorize(Roles = "Admin")] // Only Admin can update orders
        [HttpPut("{id}", Name = "UpdateOrder")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<OrderDTO> UpdateOrder(int id, OrderDTO updatedOrder)
        {
            if (id < 1 || updatedOrder == null || updatedOrder.CustomerID < 0 || updatedOrder.TotalAmount < 0)
            {
                return BadRequest("Invalid Order data.");
            }

            Order order = Order.Find(id);

            if (order == null)
            {
                return NotFound($"Order with ID {id} not found.");
            }

            order.CustomerID = updatedOrder.CustomerID;
            order.OrderDate = updatedOrder.OrderDate;
            order.TotalAmount = updatedOrder.TotalAmount;
            order.Status = updatedOrder.Status;

            if (!order.Save())
            {
                return StatusCode(StatusCodes.Status500InternalServerError, "Error updating Order");
            }

            return Ok(order.OrderDTO);
        }

        [Authorize(Roles = "Admin")] // Only Admin can delete orders
        [HttpDelete("{id}", Name = "DeleteOrder")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status403Forbidden)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult DeleteOrder(int id)
        {
            if (id < 1)
            {
                return BadRequest($"Not accepted ID {id}");
            }

            if (Order.DeleteOrder(id))
            {
                return Ok($"Order with ID {id} has been deleted.");
            }
            else
            {
                return NotFound($"Order with ID {id} not found. No rows deleted!");
            }
        }

        [Authorize]
        [HttpGet("Exists/{id}", Name = "DoesOrderExist")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public ActionResult<bool> DoesOrderExist(int id)
        {
            if (id < 1)
            {
                return BadRequest($"Not accepted ID {id}");
            }

            bool exists = Order.DoesOrderExist(id);

            return Ok(exists);
        }
    }
}
