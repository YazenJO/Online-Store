using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using OnlineStore.BLL;
using OnlineStoreAPI.DTOs;
using OnlineStoreAPI.Services;

namespace OnlineStoreAPI.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly JwtService _jwtService;
        private readonly IPasswordHasher _passwordHasher;
        private readonly ILogger<AuthController> _logger;

        public AuthController(JwtService jwtService, IPasswordHasher passwordHasher, ILogger<AuthController> logger)
        {
            _jwtService = jwtService;
            _passwordHasher = passwordHasher;
            _logger = logger;
        }

        /// <summary>
        /// Register a new customer account
        /// </summary>
        [HttpPost("register")]
        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        public ActionResult<AuthResponseDTO> Register([FromBody] RegisterRequestDTO registerRequest)
        {
            _logger.LogInformation("Registration attempt for username: {Username}", registerRequest.Username);

            // Validate input
            if (string.IsNullOrWhiteSpace(registerRequest.Username))
            {
                return BadRequest(new { message = "Username is required" });
            }

            if (string.IsNullOrWhiteSpace(registerRequest.Password))
            {
                return BadRequest(new { message = "Password is required" });
            }

            if (registerRequest.Password.Length < 6)
            {
                return BadRequest(new { message = "Password must be at least 6 characters long" });
            }

            if (string.IsNullOrWhiteSpace(registerRequest.Email))
            {
                return BadRequest(new { message = "Email is required" });
            }

            // Check if username already exists
            var existingCustomer = Customer.FindByUsername(registerRequest.Username);
            if (existingCustomer != null)
            {
                _logger.LogWarning("Registration failed: Username {Username} already exists", registerRequest.Username);
                return BadRequest(new { message = "Username already exists" });
            }

            try
            {
                // Hash the password using BCrypt
                string hashedPassword = _passwordHasher.HashPassword(registerRequest.Password);
                _logger.LogInformation("Password hashed successfully for user: {Username}", registerRequest.Username);

                // Create new customer with hashed password
                var newCustomer = new Customer(new OnlineStore.Models.CustomerDTO(
                    customerid: null,
                    name: registerRequest.Name,
                    email: registerRequest.Email,
                    phone: registerRequest.Phone ?? string.Empty,
                    address: registerRequest.Address ?? string.Empty,
                    username: registerRequest.Username,
                    password: hashedPassword,  // Store hashed password
                    role: "Customer"  // Default role
                ));

                if (!newCustomer.Save())
                {
                    _logger.LogError("Failed to save customer: {Username}", registerRequest.Username);
                    return StatusCode(500, new { message = "Failed to create customer account" });
                }

                _logger.LogInformation("Customer registered successfully: {Username} (ID: {CustomerID})", 
                    registerRequest.Username, newCustomer.CustomerID);

                // Generate JWT token
                var token = _jwtService.GenerateToken(
                    newCustomer.CustomerID.Value,
                    newCustomer.Username,
                    newCustomer.Role ?? "Customer"
                );

                var response = new AuthResponseDTO
                {
                    Customer = newCustomer.CustomerDTO,
                    Token = token
                };

                return CreatedAtAction(nameof(GetCurrentUser), response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during registration for username: {Username}", registerRequest.Username);
                return StatusCode(500, new { message = "An error occurred during registration", details = ex.Message });
            }
        }

        /// <summary>
        /// Login with username and password
        /// </summary>
        [HttpPost("login")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        public ActionResult<AuthResponseDTO> Login([FromBody] LoginRequestDTO loginRequest)
        {
            _logger.LogInformation("Login attempt for username: {Username}", loginRequest.Username);

            // Validate input
            if (string.IsNullOrWhiteSpace(loginRequest.Username) || string.IsNullOrWhiteSpace(loginRequest.Password))
            {
                _logger.LogWarning("Login failed: Missing username or password");
                return Unauthorized(new { message = "Username and password are required" });
            }

            // Find customer by username
            var customer = Customer.FindByUsername(loginRequest.Username);
            if (customer == null)
            {
                _logger.LogWarning("Login failed: Username {Username} not found", loginRequest.Username);
                return Unauthorized(new { message = "Invalid username or password" });
            }

            // Verify password using BCrypt
            bool isPasswordValid = _passwordHasher.VerifyPassword(loginRequest.Password, customer.Password);
            
            if (!isPasswordValid)
            {
                _logger.LogWarning("Login failed: Invalid password for username {Username}", loginRequest.Username);
                return Unauthorized(new { message = "Invalid username or password" });
            }

            _logger.LogInformation("Login successful for username: {Username} (ID: {CustomerID})", 
                loginRequest.Username, customer.CustomerID);

            // Generate JWT token with role
            var token = _jwtService.GenerateToken(
                customer.CustomerID.Value,
                customer.Username,
                customer.Role ?? "Customer"
            );

            var response = new AuthResponseDTO
            {
                Customer = customer.CustomerDTO,
                Token = token
            };

            return Ok(response);
        }

        /// <summary>
        /// Get current authenticated user's information
        /// </summary>
        [Authorize]
        [HttpGet("me")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        public ActionResult<OnlineStore.Models.CustomerDTO> GetCurrentUser()
        {
            // Get user ID from JWT claims
            var userIdClaim = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier);
            
            if (userIdClaim == null)
            {
                _logger.LogWarning("GetCurrentUser failed: No user ID in token");
                return Unauthorized(new { message = "Invalid token" });
            }

            if (!int.TryParse(userIdClaim.Value, out int userId))
            {
                _logger.LogWarning("GetCurrentUser failed: Invalid user ID format: {UserId}", userIdClaim.Value);
                return Unauthorized(new { message = "Invalid token" });
            }

            _logger.LogInformation("GetCurrentUser request for user ID: {UserId}", userId);

            var customer = Customer.Find(userId);
            
            if (customer == null)
            {
                _logger.LogWarning("GetCurrentUser failed: Customer {UserId} not found", userId);
                return NotFound(new { message = "User not found" });
            }

            _logger.LogInformation("GetCurrentUser successful for: {Username} (ID: {CustomerId})", 
                customer.Username, customer.CustomerID);

            return Ok(customer.CustomerDTO);
        }
    }
}
